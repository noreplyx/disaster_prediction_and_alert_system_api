// <auto-generated />
using System;
using Main.Common.Persistence.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Main.Migrations
{
    [DbContext(typeof(PostgreSqlDbContext))]
    [Migration("20250928174329_AddRegionAlertRecord")]
    partial class AddRegionAlertRecord
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Main.Modules.DisasterPredictionModule.Entities.DisasterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("DisasterTypes");
                });

            modelBuilder.Entity("Main.Modules.DisasterPredictionModule.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Main.Modules.DisasterPredictionModule.Entities.RegionAlertRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlertType")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisasterTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("integer");

                    b.Property<double>("RiskScore")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("Threshold")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DisasterTypeId");

                    b.HasIndex("RegionId");

                    b.ToTable("RegionAlertRecord");
                });

            modelBuilder.Entity("Main.Modules.DisasterPredictionModule.Entities.RegionDisasterConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DisasterTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<double>("Threshold")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DisasterTypeId");

                    b.HasIndex("RegionId");

                    b.ToTable("RegionDisasterConfigurations");
                });

            modelBuilder.Entity("Main.Modules.DisasterPredictionModule.Entities.RegionAlertRecord", b =>
                {
                    b.HasOne("Main.Modules.DisasterPredictionModule.Entities.DisasterType", "DisasterType")
                        .WithMany()
                        .HasForeignKey("DisasterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Main.Modules.DisasterPredictionModule.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DisasterType");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Main.Modules.DisasterPredictionModule.Entities.RegionDisasterConfiguration", b =>
                {
                    b.HasOne("Main.Modules.DisasterPredictionModule.Entities.DisasterType", "DisasterType")
                        .WithMany()
                        .HasForeignKey("DisasterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Main.Modules.DisasterPredictionModule.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DisasterType");

                    b.Navigation("Region");
                });
#pragma warning restore 612, 618
        }
    }
}
